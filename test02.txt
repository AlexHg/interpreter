This is a comment. As you can see, we generally use whitespace and nothing else.
It makes programs very clear and easy to understand.


    unit Getter⟦t⟧

      new E = Escape⟦(), t⟧

      With⟦a⟧(x : t)(f : () ⟶ a) : a
        E.Catch(f)(C(x))

      C⟦a⟧(x : t)()(f : t ⟶ a) : a
        f(x)

      Get : t
        E.Throw()

    new G = Getter⟦()⟧

    sum Bool
      False
      True


The IO module provides a mechanism to write strings.


    mod IO

      new R = Escape⟦String, ()⟧

      With(f : () ⟶ Output) : Output
        R.Catch(f)(C)

      C(x : String)(f : () ⟶ Output) : Output
        Write(x)(Continue(f))

      Put(x : String) : ()
        R.Throw(x)


A text line starts at column 1. It proceeds until there are two empty lines.
This means you can be fairly freeform with paragraphs without causing
interference with code.


    Main : Output
      IO.With(L)

    L() : Output
      IO.Put("A")
      IO.Put("B")
      IO.Put("C")
      Exit

    F() : Output
      G.Get
      Exit

    Identity⟦a⟧(x : a) : a
      x

    Compose⟦a, b, c⟧(f : b ⟶ c)(g : a ⟶ b)(x : a) : c
      f(g(x))

    Constant⟦a, b⟧(x : a)(y : b) : a
      x

 -- Comments are usually written with a double dash in the gutter, so it is
 -- easy to see comment markers.

 -- sum List⟦a⟧
 --   Nil
 --   Cons(a, List⟦a⟧)
