The minimial program.


    mod IO

      sub R ↦ Root

      new E = Escape⟦Output ⟶ Output, ()⟧

      With(f : () ⟶ ()) : Output
        for (g)(k) in E.Catch(Compose(Constant(R.Exit))(f))
          g(Continue(k))

      Write(x : String) : ()
        E.Throw(R.Write(x))

      Exit⟦a⟧ : a
        E.Throw(Constant(R.Exit))
        Unreachable

    new E = Escape⟦(), Output⟧

    new B = Box⟦String⟧

    Main : Output
      in IO.With
        IO.Write("1")
        IO.Write("2")
        in B.With("A")
          IO.Write("3")
 --     IO.Write("4")
 --       IO.Write(B.Get)
 --       B.Set("B")
 --       IO.Write(B.Get)
 --       B.Set("C")
 --       IO.Write(B.Get)

    unit Box⟦t⟧

      new S = Escape⟦t ⟶ t, t⟧

      With⟦a⟧(x : t)(f : () ⟶ a) : a
        bind fold : t ⟶ a to for (modify : t ⟶ t)(k : t ⟶ (t ⟶ a))(x : t) in S.Catch(A(f))
          k(x)(modify(x))
        fold(x)

      A⟦a⟧(f : () ⟶ a)() : t ⟶ a
        Constant(f())

      Modify(f : t ⟶ t) : t
        S.Throw(f)

      Get : t
        Modify(Identity)

      Set(x : t) : ()
        Ignore(Modify(Constant(x)))

    Ignore⟦a⟧(x : a) : ()
      ()

    unit Get⟦t⟧

      new E = Escape⟦(), t⟧

      With⟦a⟧(x : t)(f : () ⟶ a) : a
        for ()(f) in E.Catch(f)
          f(x)

      Get : t
        E.Throw()

    sum Bool
      False
      True

    sum Either⟦a, b⟧
      Left(a)
      Right(b)

    unit Error

      new E = Escape⟦String, ()⟧

      With⟦a⟧(f : () ⟶ a) : Either⟦String, a⟧
        for (x)(_) in E.Catch(Compose(Right)(f))
          Left(x)

      Error⟦a⟧(x : String) : a
        E.Throw(x)
        Unreachable

    One : String
      "1"

    Identity⟦a⟧(x : a) : a
      x

    Compose⟦a, b, c⟧(f : b ⟶ c)(g : a ⟶ b)(x : a) : c
      f(g(x))

    Constant⟦a, b⟧(x : a)(y : b) : a
      x

    sum List⟦a⟧
      Nil
      Cons(a, List⟦a⟧)

    First⟦a, b⟧(x : a, y : b) : a
      x

    Second⟦a, b⟧(x : a, y : b) : b
      y

    Curry⟦a, b, c⟧(f : (a, b) ⟶ c)(x : a)(y : b) : c
      f(x, y)

    Uncurry⟦a, b, c⟧(f : a ⟶ b ⟶ c)(x : a, y : b) : c
      f(x)(y)

    sum Stream⟦s⟧
      End
      Next(s)(() ⟶ Stream⟦s⟧)

    unit Generate⟦u⟧

      new E = Escape⟦u, ()⟧

      With(f : () ⟶ ()) : Stream⟦u⟧
        E.Catch(Compose(Constant(End))(f))(Next)

      Yield(x : u) : ()
        E.Throw(x)

 -- mod Channel
 --   sum T
 --   Self : T
 --   Command⟦a⟧(x : T)(f : () ⟶ a) : a
 --   Serve : ()

    mod List

      new G = Generate⟦String⟧
 --   new G⟦a⟧ = Generate⟦a⟧

      Each⟦b⟧(xs : List⟦b⟧)(f : b ⟶ ()) : ()
        case xs
          Nil
            ()
          Cons(x, xs)
            f(x)
            Each(xs)(f)

      ToStream(xs : List⟦String⟧) : Stream⟦String⟧
        in G.With
          Each(xs)(G.Yield)
